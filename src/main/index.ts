import { app, BrowserWindow, desktopCapturer, ipcMain, webContents } from 'electron';
import { createWindow } from './mainWindow';
import { initIpcMain } from './ipcMain'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
// declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
let mainWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => { mainWindow = createWindow() });

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    // createWindow();
    mainWindow = createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

initIpcMain();
// ipcMain.on("GET_SCREEN_IMAGE", async () => {
//   const sources = await desktopCapturer.getSources({
//     types: ['screen'],
//     thumbnailSize: getScreenSize(),
//   });
//   cutWindow.webContents.send("GET_SCREEN_IMAGE", sources[0]);
// })

// ipcMain.on('SET_CUT_SCREEN', async (e, cutScreen) => {
//   closeCutWindow()
//   mainWindow.webContents.send('GET_CUT_INFO', cutScreen)
//   mainWindow.show()
// })

export { mainWindow };
